library(ggplot2)
library(usmap)
library(choroplethr)
library(choroplethrMaps)
library(dplyr)
library(fst)
library(data.table)
library(rgdal)
library(scales)
library(ggthemes)
library(plotly)
library(tmap)
library(tmaptools)
library(tigris)
library(shiny)
library(stringr)

#Good resources:
#https://www.computerworld.com/article/3175623/data-analytics/mapping-in-r-just-got-a-whole-lot-easier.html
#https://github.com/mtennekes/tmap/tree/master/demo/USChoropleth
# https://github.com/walkerke/tigris
# https://www.census.gov/geo/maps-data/data/cbf/cbf_state.html
#http://gis.ny.gov/gisdata/inventories/details.cfm?DSID=927

setwd("/Users/Jacky/Documents/R")
vet <- read.csv("9L_VetPop2016_County.csv")
# vet$county <- as.data.frame(vet$county)
# vet$state <- as.data.frame(vet$state)
vet[1] <- NULL
vet <- vet[-c(3144:3149),]
vet$County <- as.character(vet$County)
vet$State <- as.character(vet$State)
vet <- as.data.frame(vet)
vet$y2015 <- as.numeric(gsub(",","",vet$y2015))
vet$y2016 <- as.numeric(gsub(",","",vet$y2016))
# vet$y2015 <- as.numeric(vet$y2015)
# vet$y2016 <- as.numeric(vet$y2016)
setDT(vet)

#subset
vet2 = vet[,.(State,y2015)]

#aggregate
vet2 = 
  vet2[,list(population = sum(y2015))
       , by = list(State)]
#us_geo <- states(class = "sf")
#read in shape file
setwd("/Users/Jacky/Documents/R/cb_2017_us_state_500k")
us_geo = read_shape("cb_2017_us_state_500k.shp",as.sf = T,stringsAsFactors = F)
str(us_geo)
popmap = append_data(us_geo
                      ,vet2
                      ,key.shp = "STUSPS"
                      ,key.data = "State")

#make a map
my_map = 
  tm_shape(popmap) + 
  tm_fill("population", palette = "Oranges"
          ,title = "2015 Veteran Population Density", id = "STUSPS") +
  tm_borders(alpha=.4) 

tmap_leaflet(my_map)

#------------------------- 2016 veterans population map-------------------------
setwd("/Users/Jacky/Documents/R")

vet3 = vet[,.(State,y2016)]

#aggregate
vet3 = 
  vet3[,list(population = sum(y2016))
       , by = list(State)]

#read in shape file
setwd("/Users/Jacky/Documents/R/cb_2017_us_state_500k")
us_geo2 = read_shape("cb_2017_us_state_500k.shp",as.sf = T,stringsAsFactors = F)
popmap2 = append_data(us_geo2
                     ,vet3
                     ,key.shp = "STUSPS"
                     ,key.data = "State")

#make a map
my_map2016 = 
  tm_shape(popmap2) + 
  tm_fill("population", palette = "Oranges"
          ,title = "2015 Veteran Population Density", id = "STUSPS") +
  tm_borders(alpha=.4) 

tmap_leaflet(my_map2016)

setwd("/Users/Jacky/Documents/R")

#------NY density map----------------------------------
setwd("/Users/Jacky/Documents/R")
vetny <- read.csv("9L_VetPop2016_County.csv")
# vet$county <- as.data.frame(vet$county)
# vet$state <- as.data.frame(vet$state)
# vetny$Code <- str_trim(vetny$Code)
# vetny$Code <- str_pad(vetny$Code, width = 6, side = "left", pad = "0")
vetny$County <- as.character(vetny$County)
vetny$State <- as.character(vetny$State)
vetny$y2015 <- as.numeric(gsub(",","",vetny$y2015))
# vetny$Code <- as.character(vetny$Code)
# vetny$y2015 <- as.numeric(as.character(vetny$y2015))
# vetny$y2016 <- as.numeric(vetny$y2016)
vetny <- dplyr::filter(vetny, State == "NY")
setDT(vetny)


#subset
vetny1 = vetny[,.(Code, State,County,y2015)]

#aggregate
vetny1 = 
  vetny1[,list(Code, population = y2015, County)
       , by = list(State)]

#read in shape file
setwd("/Users/Jacky/Documents/R/ny_shape2")
nygeo = read_shape("Counties.shp",as.sf = T,stringsAsFactors = F)
nymap = append_data(nygeo
                      ,vetny1
                      ,key.shp = "NAME"
                      ,key.data = "County")
nymap$POP2010 <- as.numeric(nymap$POP2010)

#make a map
ny_map2015 = 
  tm_shape(nymap) + 
  tm_fill("population", palette = "Oranges"
          ,title = "2015 map of population", id = "NAME") +
  tm_borders(alpha=.4) 

tmap_leaflet(ny_map2015)


#Percentage of veterans by county in NY
nymapcopy <- nymap
setDT(nymapcopy)
nypercent <- nymapcopy[,list(pop = population/POP2010 *100)
                , by = list(NAME)]


#read in shape file
setwd("/Users/Jacky/Documents/R/ny_shape2")
nygeoperc = read_shape("Counties.shp",as.sf = T,stringsAsFactors = F)
nymapperc = append_data(nygeoperc
                    ,nypercent
                    ,key.shp = "NAME"
                    ,key.data = "NAME")
# nymap$POP2010 <- as.numeric(nymap$POP2010)

#make a map
ny_map2015perc = 
  tm_shape(nymapperc) + 
  tm_fill("pop", palette = "Oranges"
          ,title = "2015 map of population", id = "NAME") +
  tm_borders(alpha=.4) 

tmap_leaflet(ny_map2015perc)
# 
# #Remove Hamilton to see a more meaningful graph
# nymapnoham <- nymap
# nymapnoham <- nymapnoham[-c(21)]
# setDT(nymapnoham)
# nypercentnoham <- nymapnoham[,list(pop = population/POP2010 *100)
#                        , by = list(NAME)]
# 
# 
# #read in shape file
# setwd("/Users/Jacky/Documents/R/ny_shape2")
# nygeopercnoham = read_shape("Counties.shp",as.sf = T,stringsAsFactors = F)
# nymappercnoham = append_data(nygeopercnoham
#                         ,nypercentnoham
#                         ,key.shp = "NAME"
#                         ,key.data = "NAME")
# # nymap$POP2010 <- as.numeric(nymap$POP2010)
# 
# #make a map
# ny_map2015percnoham = 
#   tm_shape(nymappercnoham) + 
#   tm_fill("pop", palette = "Oranges"
#           ,title = "2015 map of population", id = "NAME") +
#   tm_borders(alpha=.4) 
# 
# tmap_leaflet(ny_map2015percnoham)

#--------------------------------------
#Create an Age group bar graph

setwd("/Users/Jacky/Documents/R")
age = fread("agegroup.csv")
#Cleaning out commas
age$population <- as.numeric(gsub(",","",age$population))
# age$population = gsub(",","",age$population)
# #convert to numeric
# age$population = as.numeric(age$population)

us = 
  ggplot(data = age
         ,aes(x = age_group, y = population)) +
  geom_bar(stat = "identity") +
  ggtitle("2015 US Veteran Population") +
  #labs( caption = caption) +
  xlab("Age Group")+
  ylab("Population Count")+
  scale_y_continuous(labels = comma)+
  theme_hc() +
  theme(plot.title = element_text(hjust = 0.5),
        #panel.background = element_rect(),
        #panel.grid.major = element_blank(),
        #panel.grid.minor = element_blank(),
        plot.margin=unit(rep(0.5, 4), "cm"),
        #plot.caption=element_text(size=5, hjust=0, margin=margin(t=15)),
        axis.title.x = element_text(size = 8, colour = 'black'),
        axis.title.y = element_text(size = 8, colour = 'black'),
        axis.title = element_text(size = 8, colour = 'black'),
        axis.text.x  = element_text(vjust=.5, size=8, angle = 90))

ggplotly(us)

#------Age group in NY--------
setwd("/Users/Jacky/Documents/R")
ageny = fread("ageny.csv")
#Cleaning out commas
age$population <- as.numeric(gsub(",","",age$population))
# age$population = gsub(",","",age$population)
# #convert to numeric
# age$population = as.numeric(age$population)

zny = 
  ggplot(data = ageny
         ,aes(x = age_group, y = population)) +
  geom_bar(stat = "identity") +
  ggtitle("2015 NY Veteran Population") +
  #labs( caption = caption) +
  xlab("Age Group")+
  ylab("Population Count")+
  scale_y_continuous(labels = comma)+
  theme_hc() +
  theme(plot.title = element_text(hjust = 0.5),
        #panel.background = element_rect(),
        #panel.grid.major = element_blank(),
        #panel.grid.minor = element_blank(),
        plot.margin=unit(rep(0.5, 4), "cm"),
        #plot.caption=element_text(size=5, hjust=0, margin=margin(t=15)),
        axis.title.x = element_text(size = 8, colour = 'black'),
        axis.title.y = element_text(size = 8, colour = 'black'),
        axis.title = element_text(size = 8, colour = 'black'),
        axis.text.x  = element_text(vjust=.5, size=8, angle = 90))

ggplotly(zny)


